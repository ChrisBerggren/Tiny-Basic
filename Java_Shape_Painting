import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import javax.swing.JPanel;

import shapes.*; 

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

public class PaintPanel extends JPanel implements MouseListener, MouseMotionListener {
    
    protected enum ShapeType {
        RECTANGLE, SQUARE, TRIANGLE, OVAL, CIRCLE
    }

    protected ArrayList<Shape> shapes = new ArrayList<>();
    protected ShapeType currentShape = ShapeType.RECTANGLE;
    protected String currentColor = "#ff0000";

    public PaintPanel() {
        super();
        addMouseListener(this);
        addMouseMotionListener(this);
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        System.out.println("painting....");
        int w = this.getWidth();
        int h = this.getHeight();
        int eye = 30;
        int eyespacing = 30;
        int centerx = w/2;
        int centery = h/2;
        int thirdy = h/3;
        int nose = 40;
        int mouth = 120;

        // draw the face (red)
        g.setColor(Color.RED);
        g.drawOval(10,10,w-20,h-20);

        // draw the eyes (blue rectangles)
        g.setColor(Color.BLUE);
        g.drawRect(centerx-eyespacing-eye,thirdy-eye,eye,eye);
        g.drawRect(centerx+eyespacing,thirdy-eye,eye,eye);

        // draw the nose (purple triangle)
        g.setColor(Color.MAGENTA);
        g.drawLine(centerx, centery, centerx + nose/2, centery + nose/2);
        g.drawLine(centerx + nose/2, centery + nose/2, centerx - nose/2, centery + nose/2);
        g.drawLine(centerx-nose/2, centery+nose/2, centerx, centery);

        // draw the mouth (black oval ... partially hidden)        
        g.setColor(Color.BLACK);
        g.drawOval(centerx-mouth/2, h-thirdy, mouth, nose);

        // hide the top part of the mouth to make it look like a smile
        g.setColor(Color.WHITE);
        g.fillRect(centerx-mouth/2, h-thirdy-20, mouth, 40);

        for (Shape s : shapes) {
            s.draw(g);
        }
    }
    
    public void draw(Graphics g) {
    g.setColor(Color.decode(this.color));
    g.drawOval(this.x, this.y, this.width, this.height);
}

public void draw(Graphics g) {
    g.setColor(Color.decode(this.color));
    int[] xPoints = {this.x, this.x + this.width / 2, this.x - this.width / 2};
    int[] yPoints = {this.y + this.height, this.y, this.y};
    g.drawPolygon(xPoints, yPoints, 3);
}

    @Override
public void mouseClicked(MouseEvent e) {
    int mousex = e.getX();
    int mousey = e.getY();
    int topleftx = mousex - 40/2;
    int toplefty = mousey - 10/2;
    Shape s;
    if (currentShape == ShapeType.RECTANGLE) {
        s = new Rectangle(topleftx, toplefty, 40, 10, currentColor);
    } else if (currentShape == ShapeType.SQUARE) {
        s = new Square(topleftx, toplefty, 40, currentColor);
    } else if (currentShape == ShapeType.CIRCLE) {
        s = new Circle(mousex, mousey, 20, currentColor);
    } else if (currentShape == ShapeType.OVAL) {
        s = new Oval(topleftx, toplefty, 60, 30, currentColor);
    } else if (currentShape == ShapeType.TRIANGLE) {
        s = new Triangle(topleftx, toplefty, 40, 20, currentColor);
    } else {
        // draw a rectangle by default
        s = new Rectangle(topleftx, toplefty, 40, 10, currentColor);
    }
    shapes.add(s);
    s.draw(getGraphics());
}


    @Override
    public void mousePressed(MouseEvent e) {
        // handled in mouseClicked
        System.out.println("released");
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        // handled in mouseClicked
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        // ignored
    }

    @Override
    public void mouseExited(MouseEvent e) {
        // ignored
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        mouseClicked(e);
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }  
    
    public void saveShapes(File file) {
    try {
        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file));
        out.writeObject(shapes);
        out.close();
    } catch (IOException ex) {
        ex.printStackTrace();
    }
}

    public void saveShapes(File file) throws IOException {
      FileOutputStream fos = new FileOutputStream(file);
      ObjectOutputStream oos = new ObjectOutputStream(fos);
      oos.writeObject(shapes);
      oos.close();
      fos.close();
   }

    public void loadShapes(File file) throws IOException, ClassNotFoundException {
        FileInputStream fis = new FileInputStream(file);
        ObjectInputStream ois = new ObjectInputStream(fis);
        shapes = (ArrayList<Shape>) ois.readObject();
        ois.close();
        fis.close();
        repaint();
    }
    
    JFileChooser chooser = new JFileChooser();
    int result = chooser.showSaveDialog(this);
    if (result == JFileChooser.APPROVE_OPTION) {
        File file = chooser.getSelectedFile();
        try {
            saveShapes(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    JFileChooser chooser = new JFileChooser();
    int result = chooser.showOpenDialog(this);
    if (result == JFileChooser.APPROVE_OPTION) {
        File file = chooser.getSelectedFile();
        try {
            loadShapes(file);
        }
        catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
  }



}
